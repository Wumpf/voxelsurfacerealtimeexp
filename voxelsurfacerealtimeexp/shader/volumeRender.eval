#version 430

layout(quads, equal_spacing, ccw) in;


// input
in gl_PerVertex
{
	vec4 gl_Position;
} gl_in[];

struct Vertex
{
	vec3 Normal;
	vec3 WorldPos;
};
layout(location = 0) in Vertex In[];


// output
out gl_PerVertex
{
	vec4 gl_Position;
};
struct Vertex
{
	vec3 Normal;
	vec3 WorldPos;
};
layout(location = 0) out Vertex Out;

vec4 interpolateQuad(in vec4 v0, in vec4 v1, in vec4 v2, in vec4 v3)
{
	vec4 a = mix(v0, v1, gl_TessCoord.x);
	vec4 b = mix(v3, v2, gl_TessCoord.x);
	return mix(a, b, gl_TessCoord.y);
}

vec3 interpolateQuad(in vec3 v0, in vec3 v1, in vec3 v2, in vec3 v3)
{
	vec3 a = mix(v0, v1, gl_TessCoord.x);
	vec3 b = mix(v3, v2, gl_TessCoord.x);
	return mix(a, b, gl_TessCoord.y);
}

void main()
{	
	gl_Position = interpolateQuad(gl_in[0].gl_Position, gl_in[1].gl_Position, gl_in[2].gl_Position, gl_in[3].gl_Position);

	Out.Normal = interpolateQuad(In[0].Normal, In[1].Normal, In[2].Normal, In[3].Normal);
	Out.WorldPos = interpolateQuad(In[0].WorldPos, In[1].WorldPos, In[2].WorldPos, In[3].WorldPos);
}