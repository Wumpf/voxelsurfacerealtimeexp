#version 430

#include "constantbuffers.glsl"

layout(binding = 0) uniform sampler3D VolumeTexture;

// input
layout(location = 0) in uvec4 vs_in_quaddata[];

// output quads
layout(vertices = 4) out;
out gl_PerVertex
{
	vec4 gl_Position;
} gl_out[];

struct Vertex
{
	vec3 Normal;
};
layout(location = 0) out Vertex Out[];

const vec3 QuadLookUpTable[6*4] =
{
	vec3(-0.5f, 0.5f, -0.5f),
	vec3(0.5f, 0.5f, -0.5f),
	vec3(0.5f, 0.5f, 0.5f),
	vec3(-0.5f, 0.5f, 0.5f),

	vec3(-0.5f, -0.5f, 0.5f),
	vec3(0.5f, -0.5f, 0.5f),
	vec3(0.5f, -0.5f, -0.5f),
	vec3(-0.5f, -0.5f, -0.5f),
	
	vec3(-0.5f, -0.5f, 0.5f),
	vec3(-0.5f, -0.5f, -0.5f),
	vec3(-0.5f, 0.5f, -0.5f),
	vec3(-0.5f, 0.5f, 0.5f),

	vec3(0.5f, 0.5f, 0.5f),
	vec3(0.5f, 0.5f, -0.5f),
	vec3(0.5f, -0.5f, -0.5f),
	vec3(0.5f, -0.5f, 0.5f),

	vec3(-0.5f, 0.5f, 0.5f),
	vec3(0.5f, 0.5f, 0.5f),
	vec3(0.5f, -0.5f, 0.5f),
	vec3(-0.5f, -0.5f, 0.5f),

	vec3(-0.5f, -0.5f, -0.5f),
	vec3(0.5f, -0.5f, -0.5f),
	vec3(0.5f, 0.5f, -0.5f),
	vec3(-0.5f, 0.5f, -0.5f)
};

void main()
{
	vec3 position = QuadLookUpTable[uint(vs_in_quaddata[0].w + gl_InvocationID)];
	position += vs_in_quaddata[0].xyz;

	if(gl_InvocationID == 0)
	{
		gl_TessLevelInner[0] = 1.0f;
		gl_TessLevelInner[1] = 1.0f;
		gl_TessLevelOuter[0] = 1.0f;
		gl_TessLevelOuter[1] = 1.0f;
		gl_TessLevelOuter[2] = 1.0f;
		gl_TessLevelOuter[3] = 1.0f;
	}

	vec4 volumeData = vec4(1);
	for(int i=0; i<8 && abs(volumeData.w) > 0.001f; ++i)	// additional condition makes it acutally faster (tested with 6 samples, scaling 15)
	{
		volumeData = textureLod(VolumeTexture, position * VolumePosToTexcoord, 0.0f) * 4.0f - 2.0f;
		position -= volumeData.xyz * (volumeData.w * 8);
	}

	Out[gl_InvocationID].Normal = volumeData.xyz;	// possibly a bit outdated, but nothing bad.. btw. this is not normalized!
	gl_out[gl_InvocationID].gl_Position = ViewProjection * vec4(position, 1.0f);
//	Out[gl_InvocationID].VolumeData.x = gl_out[gl_InvocationID].gl_Position.z / gl_out[gl_InvocationID].gl_Position.w;
}

