#version 430

#include "constantbuffers.glsl"

// output quads
layout(vertices = 4) out;

layout(location = 0) in uvec4 vs_in_quaddata[];

out gl_PerVertex
{
	vec4 gl_Position;
	float gl_PointSize;
	float gl_ClipDistance[];
} gl_out[];

layout(location = 0) out vec4 Color[];

const vec3 QuadLookUpTable[6*4] =
{
	vec3(-0.5f, 0.5f, -0.5f),
	vec3(0.5f, 0.5f, -0.5f),
	vec3(0.5f, 0.5f, 0.5f),
	vec3(-0.5f, 0.5f, 0.5f),

	vec3(-0.5f, -0.5f, -0.5f),
	vec3(0.5f, -0.5f, -0.5f),
	vec3(0.5f, -0.5f, 0.5f),
	vec3(-0.5f, -0.5f, 0.5f),

	vec3(-0.5f, -0.5f, 0.5f),
	vec3(-0.5f, -0.5f, -0.5f),
	vec3(-0.5f, 0.5f, -0.5f),
	vec3(-0.5f, 0.5f, 0.5f),

	vec3(0.5f, -0.5f, 0.5f),
	vec3(0.5f, -0.5f, -0.5f),
	vec3(0.5f, 0.5f, -0.5f),
	vec3(0.5f, 0.5f, 0.5f),
	
	vec3(-0.5f, -0.5f, -0.5f),
	vec3(0.5f, -0.5f, -0.5f),
	vec3(0.5f, 0.5f, -0.5f),
	vec3(-0.5f, 0.5f, -0.5f),

	vec3(-0.5f, -0.5f, 0.5f),
	vec3(0.5f, -0.5f, 0.5f),
	vec3(0.5f, 0.5f, 0.5f),
	vec3(-0.5f, 0.5f, 0.5f)
};

void main()
{
	vec3 position = QuadLookUpTable[uint(vs_in_quaddata[0].w + gl_InvocationID)];
	position += vs_in_quaddata[0].xyz;

	gl_TessLevelInner[0] = 1.0;
	gl_TessLevelInner[1] = 1.0;
	gl_TessLevelOuter[0] = 1.0;
	gl_TessLevelOuter[1] = 1.0;
	gl_TessLevelOuter[2] = 1.0;
	gl_TessLevelOuter[3] = 1.0;

	gl_out[gl_InvocationID].gl_Position = ViewProjection * vec4(position, 1.0);
	Color[gl_InvocationID] = vec4(1,0,0,1);
}

